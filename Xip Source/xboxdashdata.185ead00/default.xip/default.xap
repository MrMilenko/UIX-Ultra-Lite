DEF theScreen Screen
{
	width 640
	height 480
}

DEF theAmbientSounds Group
{
	// 0 = main menu
	// 1 = memory area
	// 2 = music area
	// 3 = settings area

	children
	[
		DEF theAmbientSound0 AudioClip { url "Audio/AmbientAudio/AMB_12_HYDROTHUNDER_LR.wav" loop true volume 0 fade 2 pause_on_moving true }
		DEF theAmbientSound1 AudioClip { url "Audio/AmbientAudio/AMB_06_COMMUNICATION_LR.wav" loop true volume 0 fade 2 pause_on_moving true }
		DEF theAmbientSound2 AudioClip { url "Audio/AmbientAudio/AMB_05_ENGINEROOM_LR.wav" loop true volume 0 fade 2 pause_on_moving true }
	]
}

DEF thePeriodicSounds Group
{
	children
	[
		PeriodicAudioGroup
		{
			period 60 // how many seconds between sounds (minimum)
			periodNoise 20 // maximum random seconds to add to period
			children
			[
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam1.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam2.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam3.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam4.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam5.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam6.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Steam7.wav" volume 0.80 }
			]
		}

		PeriodicAudioGroup
		{
			period 120 // how many seconds between sounds (minimum)
			periodNoise 30 // maximum random seconds to add to period
			children
			[
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices1.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices2.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices3.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices4.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices5.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices6.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices7.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices8.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices9.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices10.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices11.wav" volume 0.80 }
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Voices12.wav" volume 0.80 }
			]
		}

		PeriodicAudioGroup
		{
			period 45 // how many seconds between sounds (minimum)
			periodNoise 15 // maximum random seconds to add to period
			children
			[
				AudioClip { url "Audio/AmbientAudio/comm voice 1.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 2.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm static 1.wav" fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 3.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 4.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm static 2.wav" fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 5.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 6.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm static 3.wav" fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 7.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 8.wav"  fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm static 4.wav" fade 2 volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/comm voice 9.wav"  fade 2 volume 0.85 }
			]
		}

		PeriodicAudioGroup
		{
			period 300
			periodNoise 60
			children
			[
				AudioClip { url "Audio/AmbientAudio/AMB_EC_Pinger1.wav" volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/Control Room Loop.wav" volume 0.85 }
				AudioClip { url "Audio/AmbientAudio/Control Room Loop ver2.wav" volume 0.85 }
			]
		}
	]
}

function EnableAmbientAudio()
{
	var n = Math.round(Math.random() * (theAmbientSounds.children.length() - 1));

	for (var i = 0; i < theAmbientSounds.children.length(); i = i + 1)
		theAmbientSounds.children[i].isActive = false;

	theAmbientSounds.children[n].volume = 0.95;
	theAmbientSounds.children[n].isActive = true;

	for (i = 0; i < thePeriodicSounds.children.length(); i = i + 1)
		thePeriodicSounds.children[i].isActive = true;
}

function DisableAmbientAudio()
{
	for (var i = 0; i < theAmbientSounds.children.length(); i = i + 1)
		theAmbientSounds.children[i].isActive = false;

	for (i = 0; i < thePeriodicSounds.children.length(); i = i + 1)
		thePeriodicSounds.children[i].isActive = false;
}

// Transition sounds
DEF theGamesMenuIn AudioClip { url "Audio/TransitionAudio/Games Main Menu In_LR.wav" volume 0.92 }
DEF theGamesMenuOut AudioClip { url "Audio/TransitionAudio/Games Main Menu Out_LR.wav" volume 0.92 }
DEF theGamesSubMenuIn AudioClip {url "Audio/TransitionAudio/Games Sub Menu In_LR.wav" volume 0.92 }
DEF theGamesSubMenuOut AudioClip {url "Audio/TransitionAudio/Games Sub Menu Out_LR.wav" volume 0.92 }

DEF theMusicMenuIn AudioClip { url "Audio/TransitionAudio/Music Main Menu In_LR.wav" volume 0.92 }
DEF theMusicMenuOut AudioClip { url "Audio/TransitionAudio/Music Main Menu Out_LR.wav" volume 0.92 }
DEF theMusicSubMenuIn AudioClip { url "Audio/TransitionAudio/Music Select Track In_LR.wav" volume 0.92 }
DEF theMusicSubMenuOut AudioClip { url "Audio/TransitionAudio/Music Select Track Out_LR.wav" volume 0.92 }

DEF theSettingsMenuIn AudioClip { url "Audio/TransitionAudio/Settings Main Menu In_LR.wav" volume 0.92 }
DEF theSettingsMenuOut AudioClip { url "Audio/TransitionAudio/Settings Main Menu Out_LR.wav" volume 0.92 }
DEF theSettingsSubMenuIn AudioClip { url "Audio/TransitionAudio/Settings Sub Menu In_LR.wav" volume 0.92 }
DEF theSettingsSubMenuOut AudioClip { url "Audio/TransitionAudio/Settings Sub Menu Out_LR.wav" volume 0.92 }

// Music Area sounds
DEF theCDExpand AudioClip { url "Audio/MusicAudio/Music CD Select.wav" volume 0.85 }
DEF thePlayerPanelIn AudioClip { url "Audio/MusicAudio/Games Info Screen In MSurr.wav" volume 0.92 }
DEF thePlayerPanelOut AudioClip { url "Audio/MusicAudio/Games Info Screen Out MSurr.wav" volume 0.92 }

// Main Menu Area sounds
DEF theMainMenuForward AudioClip { url "Audio/MainAudio/Global Main MenuFwd3ver2.wav" volume 0.90 }
DEF theMainMenuBackward AudioClip { url "Audio/MainAudio/Global Main MenuBack3ver2.wav" volume 0.90 }
DEF theASound AudioClip { url "Audio/MainAudio/Global A Button Select.wav" pan 75 volume 0.92 }
DEF theBSound AudioClip { url "Audio/MainAudio/Global B Button Back.wav" pan -75 volume 0.92 }
DEF theMenuChangeSound AudioClip { url "Audio/MainAudio/Global Scroll Beep.wav" volume 0.85 }
DEF theErrorSound AudioClip { url "Audio/MainAudio/Global Error Message B.wav" volume 0.85 }
DEF theDeleteSound AudioClip { url "Audio/MainAudio/Global Delete_Destroy.wav" volume 0.85 }
DEF theProgressSound AudioClip { url "Audio/MainAudio/Global Progress Bar.wav" loop true volume 0.85 }
DEF theCompleteSound AudioClip { url "Audio/MainAudio/Global Completion Beep.wav" volume 0.85 }

// Memory Menu Area sounds
DEF theMemoryControllerSelectSound AudioClip { url "Audio/MemoryAudio/Memory Controller Select.wav" volume 0.90 }
DEF theMemoryTitleSelectSound AudioClip { url "Audio/MemoryAudio/Memory Games Select.wav" volume 0.90 }
DEF theMemorySaveSelectSound AudioClip { url "Audio/MemoryAudio/Memory Memory Slot Select.wav" volume 0.90 }

// Settings Menu Area sounds
DEF theSettingsLangSound AudioClip { url "Audio/SettingsAudio/Settings Lang SubMenu Sel.wav" volume 0.90 }
DEF theSettingsParentSound AudioClip { url "Audio/SettingsAudio/Settings Parent SubMenu Sel.wav" volume 0.90 }

// Live Now Menu Area sounds
DEF theLiveNowMenuIn AudioClip { url "Audio/TransitionAudio/Settings Sub Menu In_LR.wav" volume 0.92 }
DEF theLiveNowMenuOut AudioClip { url "Audio/TransitionAudio/Settings Sub Menu Out_LR.wav" volume 0.92 }
DEF theLiveNowSoundInvite AudioClip { url "xodash/Audio/LiveNowAudio/Game Invite.wav" volume 1.0 }
DEF theLiveNowSoundRequest AudioClip { url "xodash/Audio/LiveNowAudio/Friend Request.wav" volume 1.0 }
DEF theLiveNowSoundFriendOnline AudioClip { url "xodash/Audio/LiveNowAudio/Friend Online.wav" volume 1.0 }
DEF theLiveNowSoundFriendOffline AudioClip { url "xodash/Audio/LiveNowAudio/Friend Offline.wav" volume 1.0 }

function PlaySoundError()
{
	theErrorSound.Play();
}

function PlaySoundDelete()
{
	theDeleteSound.Play();
}

function PlaySoundA()
{
	theASound.Play();
}

function PlaySoundB()
{
	theBSound.Play();
}

function PlaySoundMenuChange()
{
	theMenuChangeSound.Play();
}

DEF theScreenSaver ScreenSaver
{
	function OnStart()
	{
		theScreen.brightness = 0.1;
	}
	
	function OnEnd()
	{
		theScreen.brightness = 1;
	}
}

NavigationInfo
{
	type "sample"
	headlight false
	//  speed 10
}

DEF theBackground Background
{
	skyColor 0 0 0
}

DEF theConfig Config

function GetLanguage()
{
	return theConfig.GetLanguage();
}

function SetLanguage(nLanguage)
{
	return theConfig.SetLanguage(nLanguage);
}

function ClosePopup()
{
	if (g_bKeyboardDisplayed)
	{
		CloseKeyboard();
	}

	if (g_bPanelDisplayed)
	{
		CloseMessage();
	}
}

DEF theDVDPlayerInline Inline
{
	visible false
	url "dvd.xap"

	function onLoad()
	{
		theDVDPlayerInline.children[0].theDVDLevel.GoTo();
	}
}

DEF theDiscDrive DiscDrive
{
	function OnDiscRemoved()
	{
		if (theDVDPlayerInline.visible)
		{
			bShowDVDStopBackground = false;
			theDVDPlayerInline.children[0].theDVDPlayer.stop();
			theDVDPlayerInline.children[0].ClearOnScreenInfo();

			if (g_bPanelDisplayed)
			{
				CloseMessage();
			}

			theLauncherLevel.GoTo();
			return;
		}
		else if (theMusicInline.visible)
		{
			var c = theMusicInline.children[0];
			
			ClosePopup();
			
			if (c.musicSelect != 0) // Not Audio CD
			{
				return;
			}
			
			if (c.theMusicPlayMenu.visible)
			{
				// Update track in the player
				c.DoMusicStop();
				c.InitPlaylist();
				c.UpdateTrackList();
			}
			else if (c.theMusicCopyMenu.visible)
			{
				c.theMusicCollection.error = 3; // Disc ejected
				c.OnMusicCopyComplete();
			}
			else if (c.theMusicMenu.visible)
			{
				// Update numbers of tracks and total time
				c.UpdateMusicMetaData();
			}
		}
		else
		{
			var strYesFunction = strMessageYesFunction;
			if (strYesFunction != "")
				eval(strYesFunction);

			CloseMessage();
		}
	}
	
	function OnDiscInserted()
	{
		if (discType == "Audio")
		{
			LogOff();   // PS Bug #33608 You are still seen as Online when playing an Audio CD
						// PS Bug #33611 You can hear Live Now notification sounds while playing Audio CD

			if (theMusicInline.visible == false)
			{
				ClosePopup();
				nCurMainMenuItem = 1;   // select music when backing up
				StartCDPlayer();
				return;
			}

			var c = theMusicInline.children[0];

			if (c.theMusicPlayMenu.visible) // We are in the music play menu
			{
				if (c.musicSelect == 0) // Already in audio CD player
				{
					if (c.bMusicMenuVisible)
					{
						c.theMusicPlayMenu.GoTo();
						c.StartMusicPlayer();
						c.DoMusicPlayPause();
					}
					else
					{
						c.DoMusicStop();
						c.InitPlaylist();
						c.UpdateTrackList();
						if (c.visualizerViewpoint.isBound)
							c.DoMusicPlayPause();
					}
				}
				else if (c.theMusicPlayer.transportMode != 1) // Let's play the disc if no soundtrack is playing
				{
					bGoToCDPlayer = true;
					EnableInput(false);
					c.theMusicMenu.GoBackTo();
				}
			}
			else if (c.theMusicMenu.visible == true)
			{
				ClosePopup();
				bGoToCDPlayer = true;
				EnableInput(false);
				c.StartMusicLevel();
			}
			else
			{
				ClosePopup();
				bGoToCDPlayer = true;
				EnableInput(false);
				c.theMusicMenu.GoTo();
			}
		}
		else if (discType == "Video")
		{
			theLauncherLevel.GoTo();
		}
		else if (discType == "Title")
		{
			theLauncherLevel.GoTo();
		}
		else if (discType == "unknown")
		{
			BlockUser("ERROR MESSAGE 1");
		}
	}
}

function StartDVDPlayer()
{
	log("Starting the DVD player!");
	theDVDPlayerInline.visible = true;
}

function StartCDPlayer()
{
	log("Should start the CD player now!");
	bGoToCDPlayer = true;
	EnableInput(false); // music.xap will re-enable it again if bGoToCDPlay is true
	GoToMusic();
}

DEF theTranslator Translator

///////////////////////////////////////////////////////////////////
DEF theMusicPlayWithSubsInline Inline
{
	visible false
	url "harddrive.xap"

	function onLoad()
	{
		theMusicPlayWithSubsInline.children[0].theMusicPlayWithSubs.GoTo();
	}
}

function GoToMusicPlayWithSubs()
{
	if (theMusicPlayWithSubsInline.visible)
		theMusicPlayWithSubsInline.children[0].theMusicPlayWithSubs.GoTo();
	else
		theMusicPlayWithSubsInline.visible = true;
}
////////////////////////////////////////////////////////////////////

DEF theMusicInline Inline
{
	visible false
	url "Music2.xap"

	function onLoad()
	{
		theMusicInline.children[0].theMusicMenu.GoTo();
	}
}

function GoToMusic()
{
	
	if (theMusicInline.visible)
		theMusicInline.children[0].theMusicMenu.GoTo();
	else
	{
		BlockMemoryUnitInsert();
		theMusicInline.visible = true;
	}
}

////////////////////////////////////////////////////////////////////////////

DEF theMemoryInline Inline
{
	visible false
	url "Memory3.xap"
	
	function onLoad()
	{
		theMemoryInline.children[0].theMemoryMenu.GoTo();
	}
}

function GoToMemory()
{
	if (theMemoryInline.visible)
		theMemoryInline.children[0].theMemoryMenu.GoTo();
	else
		theMemoryInline.visible = true;
}

////////////////////////////////////////////////////////////////////////////

DEF theSettingsInline Inline
{
	visible false
	url "Settings3.xap"

	function onLoad()
	{
		if (g_bLiveTodayFadeIn)
			theSettingsInline.children[0].theSettingsViewpoint.jump = true;
		theSettingsInline.children[0].theSettingsMenu.GoTo();
	}
}

function GoToSettings()
{
	bBackToDVDPlayer = false;
	
	if (theSettingsInline.visible)
		theSettingsInline.children[0].theSettingsMenu.GoTo();
	else
		theSettingsInline.visible = true;
}

////////////////////////////////////////////////////////////////////////////

function ClearInvalidMU()
{
	theMemoryMonitor.invalidDevUnit = -1;
}

DEF theMemoryMonitor MemoryMonitor
{
	function OnDeviceChange()
	{
		var c;
		
		if (theMemoryInline.visible)
		{
			c = theMemoryInline.children[0];
			if (c.theMemoryMenu.children[0].children.length() > 0)
				c.UpdateDevices();
		}
		
		if (theAccountSelectionInline.visible)
		{
			c = theAccountSelectionInline.children[0];
			if (c.theAccountSelectionLevel.children[0].children.length() > 0)
			{
				var nLastNumberOfAccounts = theLiveAccounts.GetNumberOfAccounts();
				theLiveAccounts.Refresh();

				// Reset current position and top visible item
				if (nLastNumberOfAccounts != theLiveAccounts.GetNumberOfAccounts())
				{
					c.nCurrentAccountSelectionMenu = 0;
					c.nTopVisibleAccount = 0;
				}

				c.UpdateAccountList();

				if (theLiveAccounts.newAccountFromMU > 0)
				{
					c.UpdatePreselectedAccountSelection(theLiveAccounts.newAccountFromMU);
					theLiveAccounts.newAccountFromMU = -1;
				}
				else
					c.UpdateAccountSelectionMenuHilite();
			}
		}
	}
	
	function OnCurDevUnitChange()
	{
		if (theMemoryInline.visible)
		{
			var c = theMemoryInline.children[0];
			if (c.theMemoryMenu.children[0].children.length() > 0)
			{
				c.UpdateDeviceHighlight();
				c.UpdateDeviceMetaData();
				c.UpdateDevices();
			}
		}
	}
	
	function OnTotalFreeChanged()
	{
		if (theMemoryInline.visible)
		{
			var c = theMemoryInline.children[0];
			if (c.theMemoryMenu.children[0].children.length() > 0)
			{
				c.UpdateDeviceMetaData();
				c.UpdateDevices();
			}
		}
	}
	
	function OnInvalidMU(devUnit, fixed)
	{
		var nGamePad = Math.floor(devUnit / 2);
		var strUnit = "A";
		if (nGamePad != devUnit / 2)
			strUnit = "B";
		
		var strName = theTranslator.Translate("memory unit") + " " + (nGamePad + 1) + strUnit + "\r";
		
		if (fixed == 0)
		{
			strName = strName + theTranslator.Translate("AUTO FORMAT MU ERROR");
		}
		else
		{
			strName = strName + theTranslator.Translate("AUTO FORMAT MU");
		}
		
		TellUser(strName, "ClearInvalidMU()");
	}
	
	function OnInvalidMURemoved()
	{
		CloseMessage();
	}
}

////////////////////////////////////////////////////////////////////////////

var strEntryPointInternalDestination;
var g_nActiveControllerPort;
var g_bClearPasscode;
var g_nLastActivePort;

function GoToXoDashEntryPoint(ActiveControllerPort, bClearPasscode, EntryPoint)
{
	g_nActiveControllerPort = ActiveControllerPort;
	g_bClearPasscode = bClearPasscode;
	strEntryPointInternalDestination = EntryPoint;
	theXOnlineLevel.GoTo();
}

function LaunchAutoUpdate()
{
	g_nActiveControllerPort = 0;
	g_bClearPasscode = false;
	strEntryPointInternalDestination = "DASH_UPDATE";
	theXOnlineLevel.GoTo();
}

////////////////////////////////////////////////////////////////////////////

var g_nCurrentAccountSelected;
var g_fLiveTodayKeyboardBound;
var g_fLiveTodayNotification;
var g_bLiveTodayFadeIn;
var g_bFirstSignIn;

function ProcessServerRequired()
{
	theDiscDrive.locked = false;
	
	if (theLiveTodayInline.visible)
	{
		// Set the current menu to -2 so that the passcode screen knows where to go back
		theLiveTodayInline.children[0].nCurrentLiveTodayMenu = -2;
		
		if (theLiveAccounts.IsPasswordEnabled(g_nCurrentAccountSelected))
			theLiveTodayInline.children[0].theAccountPasscodeVerifier.GoTo();
		else
			GoToXoDashEntryPoint(0, false, "MESSAGE VIEWER");
	}
}

function UnlockDiscDrive()
{
	theDiscDrive.locked = false;
}

function UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()
{
	theDiscDrive.locked = false;
	GoToAccountSelectionWithDefaultUser();
}

function UnlockDiscDriveAndGoToMainMenu()
{
	theDiscDrive.locked = false;
	theMainMenu.GoBackTo();
}

function DisplayWaitingMessage()
{
	if( false == g_theMessageLayerLoaded )
	{
		//
		// The message will be displayed when the Message Layer is loaded so we don't
		// have to deal with it yet  (onLoad of the message layer will call this again)
		//
		
		return;
	}
	
	if( bShowLegalInfo )
	{
		bShowLegalInfo = false;
		TellUser("LEGAL MESSAGE 1", "UserAcceptedLegalInfoFromMainMenu()");
	}
	else if( bShowErrorPanel )
	{
		var e = theConfig.GetLaunchParameter1();
		bShowErrorPanel = false;
		if( e == 2 )
		{
			TellUser("ERROR MESSAGE 2", "theMainMenu.GoTo()");
		}
		else
		{
			BlockUser("ERROR MESSAGE " + e);
		}
	}
	else if( bShowInvalidDisc )
	{
		bShowInvalidDisc = false;
		if( theDiscDrive.discType == "unknown" )
		{
			BlockUser("ERROR MESSAGE 1");
		}
	}
	else if( bShowInvalidDiscWithNav )
	{
		bShowInvalidDiscWithNav = false;
		if( theDiscDrive.discType == "unknown" )
		{
			BlockUserWithFunction("ERROR MESSAGE 1", "GoToFinalDestination()");
		}
	}
	else if( bShowNoDongleMessage )
	{
		bShowNoDongleMessage = false;
		BlockUser("NoDongle");
	}
}

function UserAcceptedLegalInfo()
{
	theConfig.SetAcceptedLegalInfo(true);
	bAcceptedLegalInfo = true;
	bShowLegalInfo = false;
}

function UserAcceptedLegalInfoFromMainMenu()
{
	UserAcceptedLegalInfo();
	
	//
	// If we are in our Out of box flow Entry Point, we are done.
	// BUGBUG: It would be a bit better if we Actually took the user to the final (correct)
	//         destination, such as 'LiveNow' if their auto signin bit was set
	//
	
	if( false == bOutOfBoxFlow )
	{
		//
		// By calling this function, we will process any launch data that we received
		// We will also evaluate the disc drive, and determine if we need to reboot
		//    
		
		MainInitPart3();
	}
	
	bOutOfBoxFlow = false;
}

function DisplayLiveTodayNotification()
{
	g_fLiveTodayNotification = true;
	
	// TellUser doesn't work very well if there is no keyboard bound
	if (g_fLiveTodayKeyboardBound)
	{
		ClosePopup();
		HideWaitCursor();
		theLiveAccounts.ClearLastLogonUser();
		
		var IgnoreError = false;
		var bLogOff = true;
		var str = theLiveAccounts.GetResult();
		
		if (g_bFirstSignIn)
		{
			g_bFirstSignIn = false;
			
			if (theConfig.GetLiveToday())
			{
				IgnoreError = true;
				
				if (str == "UPDATE_REQUIRED")
					IgnoreError = false;
				else if (str == "USER_ACCOUNT_REQUIRES_MANAGEMENT")
					IgnoreError = false;
				else if (str == "USER_HAS_MESSAGE")
					IgnoreError = false;
			}
		}
		
		if (IgnoreError)
			TellUser(theTranslator.Translate("ERR NOT CONNECTED"), "UnlockDiscDriveAndGoToMainMenu()");
		else if (str == "CANNOT_ACCESS_SERVICE")
		{
			theLiveAccounts.PersistUser(g_nCurrentAccountSelected);
			AskQuestion(theTranslator.Translate("ERR NO SERVER"), "GoToXoDashEntryPoint(0, false, \"TROUBLE SHOOTER\")", "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()", 0);
		}
		else if (str == "INVALID_USER")
			TellUser(theTranslator.Translate("ERR USER ACCOUNT NOT PRESENT"), "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()");
		else if (str == "UPDATE_REQUIRED")
			TellUser(theTranslator.Translate("UPDATE REQUIRED REBOOT"), "LaunchAutoUpdate()");
		else if (str == "NO_NETWORK_CONNECTION")
		{
			theLiveAccounts.PersistUser(g_nCurrentAccountSelected);
			AskQuestion(theTranslator.Translate("ERR NO SERVER"), "GoToXoDashEntryPoint(0, false, \"TROUBLE SHOOTER\")", "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()", 0);
		}
		else if (str == "USER_ACCOUNT_REQUIRES_MANAGEMENT")
		{
			theLiveAccounts.PersistUser(g_nCurrentAccountSelected);
			TellUser(theTranslator.Translate("MSG SVR REQUIRED PROMPT"), "ProcessServerRequired()");
		}
		else if (str == "USER_HAS_MESSAGE")
		{
			bLogOff = false;
			theLiveAccounts.PersistUser(g_nCurrentAccountSelected);
			AskQuestion(theTranslator.Translate("MSG SVR RECOMMENDED PROMPT"), "GoToXoDashEntryPoint(0, false, \"MESSAGE VIEWER\")", "UnlockDiscDrive()", 0);
			
		}
		else if (str == "KICKED_BY_DUPLICATE_LOGON")
			TellUser(theTranslator.Translate("ERR KICKED BY DUP LOGON"), "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()");
		else if (str == "CONNECTION_LOST")
			TellUser(theTranslator.Translate("ERR NOT CONNECTED"), "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()");
		else if (str == "SERVERS_TOO_BUSY")
			TellUser(theTranslator.Translate("ERR NOT CONNECTED"), "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()");
		else
			TellUser(theTranslator.Translate("ERR SPS TRY AGAIN"), "UnlockDiscDriveAndGoToAccountSelectionWithDefaultUser()");
		
		if (theLiveTodayInline.visible)
		{
			if (bLogOff)
			{
				LogOff();
			}
		}
		
		g_fLiveTodayNotification = false;
	}
}

DEF theLiveAccounts LiveAccounts
{
	function OnFailure()
	{
		theLiveAccounts.ClearMOTDCache();
		DisplayLiveTodayNotification();
	}
	
	function OnConnectionEstablished()
	{
		if (theLiveTodayInline.visible)
		{
			g_bFirstSignIn = false;
			theDiscDrive.locked = false;
			HideWaitCursor();
			
			theLiveTodayInline.children[0].fLogOnInProgress = false;
			theLiveTodayInline.children[0].fLogOnSuccess = true;
			
			var c = theLiveTodayInline.children[0].theLiveTodayLevel.children[0].children[0];
			c.text_gamertag.children[0].children[0].geometry.text = theLiveAccounts.GetAccountName(g_nCurrentAccountSelected);
			theLiveTodayInline.children[0].UpdateFriendPanel();
		}
	}
	
	function OnHasMessage()
	{
		DisplayLiveTodayNotification();
	}
	
	function OnInvalidPassword()
	{
		DisplayLiveTodayNotification();
	}
	
	function OnFriendsListChanges()
	{
		if (theLiveTodayInline.visible)
			theLiveTodayInline.children[0].UpdateFriendPanel();
	}
	
	function OnDisplayMOTD()
	{
		if (theLiveTodayInline.visible)
		{
			var str;
			var nGamePCLevel = theConfig.GetGamePCFlags();
			var c = theLiveTodayInline.children[0].theLiveTodayLevel.children[0].children[0];
			var bShowIcon = true;
			if (nGamePCLevel < 4)
			{
				str = theTranslator.Translate("MOTD PC ENABLED TEXT");
				bShowIcon = false;
			}
			else
			{
				str = theLiveAccounts.GetMessageOfTheDayText();
			}
			c.message_Text_01.children[0].children[0].geometry.text = str;
			theLiveAccounts.ShowIcon(bShowIcon);
			theLiveAccounts.ClearLastLogonUser();
		}
	}
	
	function OnGameInvite()
	{
		theLiveNowSoundInvite.Play();
	}
	
	function OnFriendRequest()
	{
		theLiveNowSoundRequest.Play();
	}
	
	function OnFriendOnline()
	{
		theLiveNowSoundFriendOnline.Play();
	}
	
	function OnFriendOffline()
	{
		theLiveNowSoundFriendOffline.Play();
	}
}

////////////////////////////////////////////////////////////////////////////

DEF theLiveTodayInline Inline
{
	visible false
	url "LiveToday.xap"
	
	function onLoad()
	{
		if (g_bLiveTodayFadeIn)
			theLiveTodayInline.children[0].theLiveTodayViewpoint.jump = true;
		theLiveTodayInline.children[0].theLiveTodayLevel.GoTo();
	}
}

function LogOff()
{
	theLiveAccounts.Logoff();
	theLiveAccounts.ClearMOTDCache();
	if(theLiveTodayInline.visible)
	{
		theLiveTodayInline.children[0].fLogOnInProgress = false;
		theLiveTodayInline.children[0].fLogOnSuccess = false;
		theLiveTodayInline.children[0].nPassCodeVerified = false;
		theLiveTodayInline.children[0].nCurrentLiveTodayMenu = -1;
	}
}

DEF theAccountSelectionInline Inline
{
	visible false
	url "AccountSelection.xap"
	
	function onLoad()
	{
		if (g_bLiveTodayFadeIn)
			theAccountSelectionInline.children[0].theAccountSelectionViewpoint.jump = true;
		theAccountSelectionInline.children[0].theAccountSelectionLevel.GoTo();
	}
}

function GoToLiveToday()
{
	theDiscDrive.locked = true;
	
	if (theLiveTodayInline.visible)
		theLiveTodayInline.children[0].theLiveTodayLevel.GoTo();
	else
		theLiveTodayInline.visible = true;
}

function GoToAccountSelection()
{
	g_nCurrentAccountSelected = 0;
	
	if (theAccountSelectionInline.visible)
		theAccountSelectionInline.children[0].theAccountSelectionLevel.GoTo();
	else
		theAccountSelectionInline.visible = true;
}

function GoToAccountSelectionWithDefaultUser()
{
	if (theLiveAccounts.IsBackFromEntryPoint())
		g_nCurrentAccountSelected = theLiveAccounts.GetLastLogonUser();
	
	if (g_nCurrentAccountSelected < 0)
		g_nCurrentAccountSelected = 0;
	
	if (theAccountSelectionInline.visible)
		theAccountSelectionInline.children[0].theAccountSelectionLevel.GoTo();
	else
		theAccountSelectionInline.visible = true;
}

function GoBackToAccountSelection()
{
	if (theAccountSelectionInline.visible)
		theAccountSelectionInline.children[0].theAccountSelectionLevel.GoBackTo();
	else
		theAccountSelectionInline.visible = true;
}

function EnterLiveToday(fSkipAccountSelecion)
{
	// Set current selection to "Xbox Live"
	//nCurMainMenuItem = 2;
	
	EnableInput(false);
	
	if (fSkipAccountSelecion)
	{
		g_bLiveTodayFadeIn = true;
		
		if (theLiveAccounts.IsBackFromEntryPoint())
		{
			g_nCurrentAccountSelected = theLiveAccounts.GetLastLogonUser();
			
			if (g_nCurrentAccountSelected < 0)
			{
				// Go to account selection if not found
				g_nCurrentAccountSelected = 0;
				GoToAccountSelection();
				return;
			}
		}
		
		GoToLiveToday();
	}
	else
	{
		GoToAccountSelection();
	}
}

////////////////////////////////////////////////////////////////////////////

var nCurMainMenuItem;

function UpdateMainMenu()
{
	// Adjust for a 3 or 4 button menu
	if( g_bXOnDashExists )
	{
		// Update our 4 button menu with the online button
		Update4ButtonMainMenu();
	}
	else
	{
		// Update our 3 button menu without the online button
		Update3ButtonMainMenu();
	}
}

function Update4ButtonMainMenu()
{
	var c = theMainMenu.children[0].children[0];
	c.game_select_pod_inner02.visible = false;      // Memory Flashing Orb
	c.game_select_pod_inner.visible = false;        // Music Flashing Orb
	c.game_select_pod_inner04.visible = false;      // Xbox Live Flashing Orb
	c.game_select_pod_inner03.visible = false;      // Settings Flashing Orb
	
	if (nCurMainMenuItem == 0)  // Memory Button
	{
		c.game_select_pod_inner02.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, -0.25); }
		c.theMenuItems.SetRotation(0, 0, 1, -0.25);
		
		c.theMemoryItem.SetRotation(0, 1, 0, -0.25);
		c.theMusicItem.SetRotation(0, 1, 0, -0.25);
		c.theOnlineItem.SetRotation(0, 1, 0, -0.25);
		c.theSettingsItem.SetRotation(0, 1, 0, -0.25);
		
		c.MemoryPanelMaterial.name = "GameHilite";
		c.MusicPanelMaterial.name = "FlatSurfaces2sided";
		c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
		c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
		
		c.MemoryTextMaterial.name = "HilightedType";
		c.MusicTextMaterial.name = "NavType";
		c.OnlineTextMaterial.name = "NavType";
		c.SettingsTextMaterial.name = "NavType";
		
	}
	else if (nCurMainMenuItem == 1)  // Music Button (Default position)
	{
		c.game_select_pod_inner.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.0); }
		c.theMenuItems.SetRotation(0, 0, 1, 0.0);
		
		c.theMemoryItem.SetRotation(0, 1, 0, 0.0);
		c.theMusicItem.SetRotation(0, 1, 0, 0.0);
		c.theOnlineItem.SetRotation(0, 1, 0, 0.0);
		c.theSettingsItem.SetRotation(0, 1, 0, 0.0);
		
		c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
		c.MusicPanelMaterial.name = "GameHilite";
		c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
		c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
		
		c.MemoryTextMaterial.name = "NavType";
		c.MusicTextMaterial.name = "HilightedType";
		c.OnlineTextMaterial.name = "NavType";
		c.SettingsTextMaterial.name = "NavType";
	}
	else if (nCurMainMenuItem == 2) // Xbox Live Button
	{
		c.game_select_pod_inner04.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.25); }
		c.theMenuItems.SetRotation(0, 0, 1, 0.25);
		
		c.theMemoryItem.SetRotation(0, 1, 0, 0.25);
		c.theMusicItem.SetRotation(0, 1, 0, 0.25);
		c.theOnlineItem.SetRotation(0, 1, 0, 0.25);
		c.theSettingsItem.SetRotation(0, 1, 0, 0.25);
		
		c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
		c.MusicPanelMaterial.name = "FlatSurfaces2sided";
		c.OnlinePanelMaterial.name = "GameHilite";
		c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
		
		c.MemoryTextMaterial.name = "NavType";
		c.MusicTextMaterial.name = "NavType";
		c.OnlineTextMaterial.name = "HilightedType";
		c.SettingsTextMaterial.name = "NavType";
	}
	else if (nCurMainMenuItem == 3) // Settings Button
	{
		c.game_select_pod_inner03.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.50); }
		c.theMenuItems.SetRotation(0, 0, 1, 0.50);
		
		c.theMemoryItem.SetRotation(0, 1, 0, 0.50);
		c.theMusicItem.SetRotation(0, 1, 0, 0.50);
		c.theOnlineItem.SetRotation(0, 1, 0, 0.50);
		c.theSettingsItem.SetRotation(0, 1, 0, 0.50);
		
		c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
		c.MusicPanelMaterial.name = "FlatSurfaces2sided";
		c.OnlinePanelMaterial.name = "FlatSurfaces2sided";
		c.SettingsPanelMaterial.name = "GameHilite";
		
		c.MemoryTextMaterial.name = "NavType";
		c.MusicTextMaterial.name = "NavType";
		c.OnlineTextMaterial.name = "NavType";
		c.SettingsTextMaterial.name = "HilightedType";
	}
}

function Update3ButtonMainMenu()
{
	var c = theMainMenu.children[0].children[0];
	
	c.game_select_pod_inner02.visible = false;      // Memory Flashing Orb
	c.game_select_pod_inner.visible = false;        // Music Flashing Orb
	c.game_select_pod_inner03.visible = false;      // Settings Flashing Orb
	
	if (nCurMainMenuItem == 0)  // Memory Button
	{
		c.game_select_pod_inner02.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, -0.45); }
		c.theMenuItems.SetRotation(0, 0, 1, -0.45);
		
		c.theMemoryItem.SetRotation(0, 1, 0, -0.45);
		c.theMusicItem.SetRotation(0, 1, 0, -0.45);
		c.theSettingsItem.SetRotation(0, 1, 0, -0.45);
		
		c.MemoryPanelMaterial.name = "GameHilite";
		c.MusicPanelMaterial.name = "FlatSurfaces2sided";
		c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
		
		c.MemoryTextMaterial.name = "HilightedType";
		c.MusicTextMaterial.name = "NavType";
		c.SettingsTextMaterial.name = "NavType";
		
	}
	else if (nCurMainMenuItem == 1)  // Music Button (Default position)
	{
		c.game_select_pod_inner.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.0); }
		c.theMenuItems.SetRotation(0, 0, 1, 0.0);
		
		c.theMemoryItem.SetRotation(0, 1, 0, 0.0);
		c.theMusicItem.SetRotation(0, 1, 0, 0.0);
		c.theSettingsItem.SetRotation(0, 1, 0, 0.0);
		
		c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
		c.MusicPanelMaterial.name = "GameHilite";
		c.SettingsPanelMaterial.name = "FlatSurfaces2sided";
		
		c.MemoryTextMaterial.name = "NavType";
		c.MusicTextMaterial.name = "HilightedType";
		c.SettingsTextMaterial.name = "NavType";
	}
	else if (nCurMainMenuItem == 2) // Xbox Live Button
	{
		// This should never happen in a 3 button menu config
		// This code is purly defensive.  If there is a bug, this could help prevent bad behavior
		
		// NOTE: This is still bad though, as it would most likely prevent the user from reaching
		// the settings area
		
		nCurMainMenuItem = 1;
		UpdateMainMenu();
	}
	else if (nCurMainMenuItem == 3) // Settings Button
	{
		c.game_select_pod_inner03.visible = true;
		
		if( thcorb == false ) { c.Rotating_Large_X.SetRotation(0, 0, 1, 0.45); }
		c.theMenuItems.SetRotation(0, 0, 1, 0.45);
		
		c.theMemoryItem.SetRotation(0, 1, 0, 0.45);
		c.theMusicItem.SetRotation(0, 1, 0, 0.45);
		c.theSettingsItem.SetRotation(0, 1, 0, 0.45);
		
		c.MemoryPanelMaterial.name = "FlatSurfaces2sided";
		c.MusicPanelMaterial.name = "FlatSurfaces2sided";
		c.SettingsPanelMaterial.name = "GameHilite";
		
		c.MemoryTextMaterial.name = "NavType";
		c.MusicTextMaterial.name = "NavType";
		c.SettingsTextMaterial.name = "HilightedType";
	}
}

DEF theMainMenu Level
{
	archive "MainMenu5.xip"
	unloadable false
	
	children
	[
		Inline
		{
			url "MainMenu5/default.xap"
			
			function onLoad()
			{
				joy.secretKey = "YX";
				
				// Adjust our transforms if necessary
				var c = theMainMenu.children[0].children[0];
				if( g_bXOnDashExists )
				{
					// Setup for a 4 button menu with the online button
					c.Main_memory_ringpin_3.SetTranslation(62.779999, 13.892000, 102.000000);   // Memory
					c.Main_memory_ringpin_2.SetTranslation(56.830002, 33.290001, 101.900002);   // Music
					c.Main_Online_ringpin.SetTranslation(62.779999, -6.092000, 102.000000);     // Online
					c.Main_memory_ringpin_4.SetTranslation(57.430000, -24.379999, 101.500000);  // Settings
				}
				else
				{
					// Turn off the Online Menu Button's Visible Propery
					c.Main_Online_ringpin.visible = false;
					
					// Setup for a 3 button menu without the online button
					c.Main_memory_ringpin_3.SetTranslation(62.779999, 4.492000, 102.000000);    // Memory
					c.Main_memory_ringpin_2.SetTranslation(56.830002, 32.290001, 101.900002);   // Music
					c.Main_memory_ringpin_4.SetTranslation(57.430000, -23.379999, 101.500000);  // Settings
				}
				g_theMainMenuLoaded = true;
				UpdateMainMenu(); 
				c.game_arm01.visible = false;
				c.game_arm02.visible = false;
				c.game_arm03.visible = false;
				c.game_arm04.visible = false;
				
				if(thcorb == true)
				{
					c.Main_pod_backing01.visible = false;
					c.Main_pod_backing02.visible = true;
					c.Main_pod_backing02.fade    = 2; 
					c.podsupport_ring.visible    = false;
					c.podsupportMaterial.name    = "PanelBacking_01";
					c.Large_X_Spinner.rpm        = 1;
					c.Pod_1_Spinner.rpm          = 1.3;
					c.Pod_2_Spinner.rpm          = 1.3;
					c.Pod_3_Spinner.rpm          = 1.3;
					c.Pod_4_Spinner.rpm          = 1.3;
					c.MainPod_1_Spinner.rpm      = 1.3;      // Main Podshell 09
					c.MainPod_2_Spinner.rpm      = -2.3;     // Main Podshell 10
					c.MainPod_3_Spinner.rpm      = -1.0;     // Main Podshell 11
					//c.MainPod_4_Spinner.rpm      = -1.0;     // Main Podarm 1-4 
				}
				else
				{
					c.Main_pod_backing01.visible = true;
					c.Main_pod_backing02.visible = false;
				}
			}
		}
	]
	
	shell Transform
	{
		scale 150 150 150
		translation 0 -20 80
		children
		[
			Waver
			{
				rpm 0.75
				children
				[
					Shape
					{
						appearance Appearance
						{
							material MaxMaterial
							{
								name "InnerWall_01"
							}
							texture ImageTexture
							{
								alpha true
								url "cellwall.bmp"
							}
						}
						geometry Mesh { url "Inner_cell-FACES.xm" }
					}
					Shape
					{
						appearance Appearance
						{
							material MaxMaterial
							{
								name "InnerWall_02"
							}
						}
						geometry Sphere
						{
							radius 1
						}
					}
				]
			}
		]
	}
	
	
	path Viewpoint
	{
		fieldOfView 1.300000
		orientation -0.177400 -0.983500 -0.036250 -0.045440
		position 11.180000 -32.299999 174.300003
		jump false
	}
	
	control DEF joy Joystick
	{
		function OnADown()
		{
			theMainMenu.children[0].children[0].select_pod_HL.children[0].appearance.material.param = 1;
			
			PlaySoundA();
			if ((RightTrigger == true) & (LeftTrigger == true)) { QuickLaunch("A"); return;}
			if (nCurMainMenuItem == 0)  // Memory Button
			{
				theGamesMenuIn.Play();
				GoToMemory();
			}
			else if (nCurMainMenuItem == 1) // Music Button
			{
				theMusicMenuIn.Play();
				GoToMusic();
			}
			else if (nCurMainMenuItem == 2) // Xbox Live Button
			{
				theGamesMenuIn.Play();      // TODO: Get final sound
				GoToMusicPlayWithSubs();
				//EnterLiveToday(false);      // Enter LiveToday
			}
			else if (nCurMainMenuItem == 3) // Settings Button
			{
				theSettingsMenuIn.Play();
				GoToSettings();
			}
		}
		function OnBDown()
		{
			if ((RightTrigger == true) & (LeftTrigger == true)) { QuickLaunch("B"); return;}
		}
		function OnXDown()
		{    
			if ((RightTrigger == true) & (LeftTrigger == true)) { QuickLaunch("X"); return;}
		}
		function OnYDown()
		{        
			if ((RightTrigger == true) & (LeftTrigger == true)) { QuickLaunch("Y"); return;}
		}
		function OnRightDown(){ RightTrigger = true;  }
		function OnRightUp()  { RightTrigger = false; }
		function OnLeftDown() { LeftTrigger = true;   }
		function OnLeftUp()   { LeftTrigger = false;  }
		function OnMoveUp()
		{
			if (nCurMainMenuItem > 0)
			{
				nCurMainMenuItem = nCurMainMenuItem - 1;
				
				// Determine if we should skip the online button
				if( false == g_bXOnDashExists )
				{
					// If we would be on the Xbox Live Button, let's skip over it
					if( 2 == nCurMainMenuItem )
						nCurMainMenuItem = nCurMainMenuItem - 1;
				}
				
				theMainMenuBackward.Play();
				UpdateMainMenu();
			}
		}
		
		function OnMoveDown()
		{
			if (nCurMainMenuItem < 3)
			{
				nCurMainMenuItem = nCurMainMenuItem + 1;
				
				// Determine if we should skip the online button
				if( false == g_bXOnDashExists )
				{
					// If we would be on the Xbox Live Button, let's skip over it
					if( 2 == nCurMainMenuItem )
						nCurMainMenuItem = nCurMainMenuItem + 1;
				}
				
				theMainMenuForward.Play();
				UpdateMainMenu();
			}
		}

		function OnKeyVerified()
		{
			theConfig.ToggleNoisyCamera();
			//theGamesMenuIn.Play();
			//GoToMusicPlayWithSubs();
		}        
	}
	
	function OnActivate()
	{
		EnableAmbientAudio();
		if( g_theMainMenuLoaded )
		{
			UpdateMainMenu();
		}
	}
	
	function OnArrival()
	{
		if( false == bAcceptedLegalInfo )
		{
			//
			// We need to pop up the dialog displaying the legal information to the user
			//
			
			bShowLegalInfo = true;
			DisplayWaitingMessage();
		}
	}
}

////////////////////////////////////////////////////////////////////////////

var bBackToDVDPlayer;
var bGoToCDPlayer;
var bBackToLauncher;
var bShowErrorPanel;
var bShowInvalidDisc;
var bShowInvalidDiscWithNav;
var bShowNoDongleMessage;
var bShowLegalInfo;
var bAcceptedLegalInfo;
var bForceSetLanguage;
var bForceSetTimeZone;
var bForceSetClock;
var bOutOfBoxFlow;
var g_bKeyboardDisplayed;
var g_bPanelDisplayed;
var g_bAboutToReboot;
var g_bAboutToRebootToOnline;
var g_bAboutToLaunchGame;
var bShowDVDStopBackground;
var bCleanupSpecifiedDrive;
var nSettingArea;
var g_nRec;
var g_bXOnDashExists;
var g_theMainMenuLoaded;
var g_theMessageLayerLoaded;
var g_bResetDiscDeferredNotification;
var g_bLeaveDriveLocked;
var g_bLeaveMemoryUnitsBlocked;
// All new var's below here...

var LeftTrigger;
var RightTrigger;
var RightThumb;
var LeftThumb;

var CurrentViewpoint;
var CurrentAltViewpoint;

var theInLine;
var currentControlType;
var previousControlType;
var ConfigFile;
var thcorb;
var bMusicPlayerReady;
var currentMusicPlayerMode;

var quicklaunch;
var gamelaunch;
var launchPath;
var launchXbe;

var CurrentGameBoardAltViewpoint;

function initialize()
{
	
	quicklaunch = false;
	gamelaunch = false;
	
	RightThumb = false;
	LeftThumb = false;
	LeftTrigger = false;
	RightTrigger = false;
	bBackToDVDPlayer = false;
	bGoToCDPlayer = false;
	bBackToLauncher = false;
	bShowErrorPanel = false;
	bShowLegalInfo = false;
	bShowInvalidDisc = false;
	bShowInvalidDiscWithNav = false;
	bShowNoDongleMessage = false;
	bOutOfBoxFlow = false;
	nCurMainMenuItem = 1; // start with music selected
	g_bKeyboardDisplayed = false;
	g_bPanelDisplayed = false;
	g_bAboutToReboot = false;
	g_bAboutToRebootToOnline = false;
	g_bAboutToLaunchGame = false;
	bShowDVDStopBackground = true;
	bCleanupSpecifiedDrive = false;
	nSettingArea = 0;
	g_nRec = 0;
	strMessageYesFunction = "";
	strMessageNoFunction = "";
	strKeyboardDoneFunction = "";
	strKeyboardCancelFunction = "";
	g_bXOnDashExists = false;
	g_theMainMenuLoaded = false;
	g_theMessageLayerLoaded = false;
	g_nCurrentAccountSelected = 0;
	strEntryPointInternalDestination = "";
	g_bLiveTodayFadeIn = false;
	g_nLastActivePort = 0;
	g_bFirstSignIn = false;
	g_bResetDiscDeferredNotification = false;
	g_bLeaveDriveLocked = false;
	g_bLeaveMemoryUnitsBlocked = false;
	ConfigFile = new Settings;
	ConfigFile.file = "Y:\\config.xbx";
	thcorb = GetOrb();
	
	theAmbientSound0.Play();
	theAmbientSound1.Play();
	theAmbientSound2.Play();
	
	// Figure out if we need to display 3 or 4 items on the main menu
	g_bXOnDashExists = theConfig.NtFileExists( "\\Device\\Harddisk0\\partition2\\xodash\\xonlinedash.xbe" );
	
	var nLanguage = theConfig.GetLanguage();
	if (nLanguage != 0) nLanguage = nLanguage - 1;
	theTranslator.SetLanguage(nLanguage);
	
	bAcceptedLegalInfo = theConfig.GetAcceptedLegalInfo();
	bForceSetLanguage = theConfig.ForceSetLanguage();
	bForceSetTimeZone = theConfig.ForceSetTimeZone();
	bForceSetClock = theConfig.ForceSetClock();
	
	if ((bForceSetLanguage + bForceSetTimeZone + bForceSetClock) != false)
	{
		//
		// we need to ask the user to set invalid language/timezone/clock
		// We have the bOutOfBoxFlow variable so that if we need to present the
		// disclaimer dialog, we know how to finish processing the entry points
		//
		
		bOutOfBoxFlow = true;
		theDiscDrive.locked = true;
		BlockMemoryUnitInsert();
		EnableInput(true);
		GoToSettings();
		return;
	}
	
	if( false == bAcceptedLegalInfo )
	{
		theDiscDrive.locked = true;
		g_bResetDiscDeferredNotification = true;
		EnableInput(true);
		theMainMenu.GoTo();
		EnableAmbientAudio();
		return;
	}
	
	MainInitPart3();
}

function MainInitPart3()
{
	var reason = theConfig.GetLaunchReason();
	if (reason == "Error")
	{
		EnableInput(true);
		theMainMenu.GoTo();
		EnableAmbientAudio();
		bShowErrorPanel = true;
		DisplayWaitingMessage();
		return;
	}
	else if (reason == "Memory")
	{
		if (theConfig.CanDriveBeCleanup(theConfig.GetLaunchParameter1()))
		{
			bCleanupSpecifiedDrive = true;
		}
		
		bBackToLauncher = true;
		EnableInput(true);
		EnableAmbientAudio();
		GoToMemory();
		return;
	}
	else if (reason == "Settings")
	{
		bBackToLauncher = true;
		nSettingArea = theConfig.GetLaunchParameter1();
		EnableInput(true);
		EnableAmbientAudio();
		GoToSettings();
		return;
	}
	else if (reason == "Music")
	{
		bBackToLauncher = true;
		EnableInput(true);
		EnableAmbientAudio();
		GoToMusic();
		return;
	}
	else if (reason == "FromOnlineDash")
	{
		if (true == g_bXOnDashExists)
		{
			// Set the focus to the proper menu item
			nCurMainMenuItem = 3;
		}
	}
	else if (reason == "DVD")
	{
		EnableInput(true);
		StartDVDPlayer();
	}
	else if (reason == "FriendsInternal")
	{
		// Go back to LiveToday and sign last user back in
		if (theConfig.GetEthernetLinkStatus() == 0)
		{
			g_bLiveTodayFadeIn = true;
			GoToAccountSelectionWithDefaultUser();
		}
		else
		{
			EnterLiveToday(true);
		}
		EnableAmbientAudio();
		return;
	}
	else if (reason == "VoiceChatInternal")
	{
		// Go back to LiveToday and sign last user back in
		if (theConfig.GetEthernetLinkStatus() == 0)
		{
			g_bLiveTodayFadeIn = true;
			GoToAccountSelectionWithDefaultUser();
		}
		else
		{
			EnterLiveToday(true);
		}
		EnableAmbientAudio();
		return;
	}
	else if (reason == "MessagesInternal")
	{
		// Set the focus to the proper menu item
		nCurMainMenuItem = 2;
		// Go back to account selection and highlight appropriate user
		g_bLiveTodayFadeIn = true;
		GoToAccountSelectionWithDefaultUser();
		EnableAmbientAudio();
		return;
	}
	else if (reason == "AccountManagementInternal")
	{
		// Go back to LiveToday and sign last user back in
		if (theConfig.GetEthernetLinkStatus() == 0)
		{
			g_bLiveTodayFadeIn = true;
			GoToAccountSelectionWithDefaultUser();
		}
		else
		{
			EnterLiveToday(true);
		}
		EnableAmbientAudio();
		return;
	}
	else if (reason == "NewAccountInternal")
	{
		// Set the focus to the proper menu item
		nCurMainMenuItem = 2;
		// Go back to account selection and highlight appropriate user
		g_bLiveTodayFadeIn = true;
		GoToAccountSelectionWithDefaultUser();
		EnableAmbientAudio();
		return;
	}
	else if (reason == "AccountRecoveryInternal")
	{
		// Set the focus to the proper menu item
		nCurMainMenuItem = 2;
		// Go back to account selection and highlight appropriate user
		g_bLiveTodayFadeIn = true;
		GoToAccountSelectionWithDefaultUser();
		EnableAmbientAudio();
		return;
	}
	else if (reason == "NetworkSettingsInternal")
	{
		EnableAmbientAudio();
		EnableInput(true);
		
		// Go back to account selection and highlight appropriate user or
		// return to settings if no user previously signed in
		
		g_bLiveTodayFadeIn = true;
		g_nCurrentAccountSelected = theLiveAccounts.GetLastLogonUser();
		
		if (g_nCurrentAccountSelected < 0)
		{
			// Set the focus to the proper menu item
			nCurMainMenuItem = 3;
			GoToSettings();
			theLiveAccounts.ClearLastLogonUser();
		}
		else
		{
			// Set the focus to the proper menu item
			nCurMainMenuItem = 2;
			GoToAccountSelectionWithDefaultUser();
		}
		
		return;
	}
	
	GoToFinalDestination();
}

function GoToFinalDestination()
{
	//
	// Deal with any media that might be in the disc tray, if no media is found,
	// we should proceed to the correct 'main menu' location
	//
	
	if (theDiscDrive.discType == "Video")
	{
		EnableInput(true);
		StartDVDPlayer();
	}
	else if (theDiscDrive.discType == "Audio")
	{
		nCurMainMenuItem = 1; // select music when backing up
		StartCDPlayer();
	}
	else if (theDiscDrive.discType == "unknown")
	{
		EnableInput(true);
		bShowInvalidDiscWithNav = true;
		DisplayWaitingMessage();
		theMainMenu.GoTo();
		EnableAmbientAudio();
	}
	else
	{
		EnableInput(true);
		if (theConfig.GetLiveToday() == 0)
		{
			theMainMenu.GoTo();
		}
		else if (theConfig.GetEthernetLinkStatus() == 0)
		{
			theMainMenu.GoTo();
		}
		else if (theLiveAccounts.GetNumberOfAccounts())
		{
			g_bFirstSignIn = true;
			EnterLiveToday(true);
		}
		else
		{
			theMainMenu.GoTo();
		}
		
		EnableAmbientAudio();
	}
}

// Japanese Keyboard////////////////////////////////////////////////////////

DEF theJapaneseKeyboardLayer Layer
{
	visible false
	transparency 1
	fade 0.25
	
	viewpoint Viewpoint
	{
		fieldOfView 1.2
		position 10 9 145
	}
	
	children
	[
		DEF theJapaneseKeyboardTransform Transform
		{
			fade 0.25
			//          fade 1
			scale 0 0 0
			children
			[
				Inline
				{
					preload true
					url "JKeyboard/default.xap"
				}
			]
		}
	]
}

////////////////////////////////////////////////////////////////////////////

var strKeyboardTitle, strKeyboardEdit;
var strKeyboardDoneFunction, strKeyboardCancelFunction;

DEF theKeyboardLayer Layer
{
	visible false
	transparency 1
	fade 0.25
	
	viewpoint Viewpoint
	{
		fieldOfView 1.2
		position 10 6 150
	}
	
	children
	[
		DEF theKeyboardTransform Transform
		{
			fade 0.25
			//          fade 1
			scale 0 0 0
			children
			[
				Inline
				{
					preload true
					url "Keyboard/default.xap"
				}
			]
		}
	]
}

function KeyboardDone()
{
	var strDoneFunction = strKeyboardDoneFunction;
	
	CloseKeyboard();
	
	if (strDoneFunction != "")
		eval(strDoneFunction);
}

function KeyboardCancel()
{
	var strCancelFunction = strKeyboardCancelFunction;
	
	CloseKeyboard();
	
	if (strCancelFunction != "")
		eval(strCancelFunction);
}

function CloseKeyboard()
{
	if (g_bKeyboardDisplayed == false)
	{
		return;
	}
	
	var nKeyboardLanguage = theConfig.GetLanguage();
	if (nKeyboardLanguage == 2)  // Japanese Language
	{
		var c = theJapaneseKeyboardTransform.children[0].children[0];
		
		// Re-Enable asterisk formatting for our text panels
		c.theJKeyboard.SetAsteriskFormattingState( g_PrevAsteriskFormattingState );
		
		strKeyboardEdit = c.theJKeyboard.string;
		c.theJKeyboardJoystick.isBound = false;
		
		theJapaneseKeyboardTransform.SetScale(0, 0, 0);
		theJapaneseKeyboardTransform.SetAlpha(0);
		theJapaneseKeyboardLayer.transparency = 1;
	}
	else
	{
		var c = theKeyboardTransform.children[0].children[0];
		
		// Re-Enable asterisk formatting for our text panels
		c.theKeyboard.SetAsteriskFormattingState( g_PrevAsteriskFormattingState );
		
		strKeyboardEdit = c.theKeyboard.string;
		c.theKeyboardJoystick.isBound = false;
		
		theKeyboardTransform.SetScale(0, 0, 0);
		theKeyboardTransform.SetAlpha(0);
		theKeyboardLayer.transparency = 1;
	}
	
	strKeyboardTitle = "";
	strKeyboardDoneFunction = "";
	strKeyboardCancelFunction = "";
	
	if (theDiscDrive.locked)
	{
		theDiscDrive.locked = false;
	}
	UnblockMemoryUnitInsert();
	
	g_bKeyboardDisplayed = false;
}

var g_PrevAsteriskFormattingState;
function ShowKeyboard(strTitle, strEdit, strDoneFunction, strCancelFunction)
{
	theDiscDrive.locked = true;
	BlockMemoryUnitInsert();
	
	strKeyboardTitle = strTitle;
	strKeyboardEdit = strEdit;
	strKeyboardDoneFunction = strDoneFunction;
	strKeyboardCancelFunction = strCancelFunction;
	
	var nKeyboardLanguage = theConfig.GetLanguage();
	if (nKeyboardLanguage == 2)  // Japanese Language
	{
		var c = theJapaneseKeyboardTransform.children[0].children[0];
		
		// Disable asterisk formatting for our keyboard display
		g_PrevAsteriskFormattingState = c.theJKeyboard.GetAsteriskFormattingState();
		c.theJKeyboard.SetAsteriskFormattingState( false );
		
		c.theJKeyboard.selectKey( 8, 10 );        // Default the key selection to the DONE key
		c.theJKeyboard.string = "";
		c.theJKeyboard.string = strKeyboardEdit;
		c.theJKeyboard.shift = 0;
		c.theJKeyboard.caps = 0;
		c.theJKeyboard.jmode = 0;
		
		c.theKeyboardTitle.text = strKeyboardTitle;
		if (g_bKeyboardDisplayed == false)
		{
			c.theJKeyboardJoystick.isBound = true;
		}
		
		theJapaneseKeyboardLayer.visible = true;
		theJapaneseKeyboardLayer.transparency = 0.25;
		theJapaneseKeyboardTransform.SetScale(1, 1, 1);
		theJapaneseKeyboardTransform.SetAlpha(1);
	}
	else
	{
		var c = theKeyboardTransform.children[0].children[0];
		
		// Disable asterisk formatting for our keyboard display
		g_PrevAsteriskFormattingState = c.theKeyboard.GetAsteriskFormattingState();
		c.theKeyboard.SetAsteriskFormattingState( false );
		
		c.theKeyboard.selectKey( 0, 0 );        // Default the key selection to the DONE key
		c.theKeyboard.string = "";
		c.theKeyboard.string = strKeyboardEdit;
		c.theKeyboard.shift = 0;
		c.theKeyboard.caps = 0;
		c.theKeyboard.mode = 0;
		
		c.theKeyboardTitle.text = strKeyboardTitle;
		if (g_bKeyboardDisplayed == false)
		{
			c.theKeyboardJoystick.isBound = true;
		}
		
		theKeyboardLayer.visible = true;
		theKeyboardLayer.transparency = 0.25;
		theKeyboardTransform.SetScale(1, 1, 1);
		theKeyboardTransform.SetAlpha(1);
	}
	
	g_bKeyboardDisplayed = true;
}

////////////////////////////////////////////////////////////////////////////

DEF theMessageLayer Layer
{
	fade 0.25
	transparency 1
	
	viewpoint Viewpoint
	{
		fieldOfView 0.602400
		orientation 0.000000 -1.000000 0.000000 -0.003534
		position 0.424700 0.000000 6.052000
	}
	
	children
	[
		Transform
		{
			children
			[
				DEF theMessageInline Inline
				{
					preload true
					url "Message/default.xap"
					
					function onLoad()
					{
						var c = children[0];
						c.button_yes.visible = false;
						c.button_no.visible = false;
						c.button_center.visible = false;
						c.slider_slot.visible = false;
						c.slider.visible = false;
						
						g_theMessageLayerLoaded = true;
						
						DisplayWaitingMessage();
					}
				}
			]
		}
	]
}

////////////////////////////////////////////////////////////////////////////

DEF theWaitCursorLayer Layer
{
	fade 0.1
	transparency 1
	
	viewpoint Viewpoint
	{
		fieldOfView 0.602400
		orientation 0.000000 -1.000000 0.000000 -0.003534
		position 0.424700 0.000000 6.052000
	}
	
	children
	[
		Transform
		{
			children
			[
				DEF theWaitCursorInline Inline
				{
					preload true
					url "WaitCursor/default.xap"
				}
			]
		}
	]
}

function ShowWaitCursor()
{
	theWaitCursorLayer.transparency = 0.25;
}

function HideWaitCursor()
{
	theWaitCursorLayer.transparency = 1.0;
}

////////////////////////////////////////////////////////////////////////////

var strMessageText;
var strMessageYesFunction;
var strMessageNoFunction;
var nCurMessageButton;
var nMessageButtonCount;

function UpdateMessageButtonHighlight()
{
	var c = theMessageInline.children[0];
	
	if (nCurMessageButton == 0)
	{
		c.button_yes.children[0].appearance.material.name = "GameHilite";
		c.text_yes.children[0].appearance.material.name = "Material #133";
		
		c.button_no.children[0].appearance.material.name = "FlatSurfaces";
		c.text_no.children[0].appearance.material.name = "NavType";
	}
	else
	{
		c.button_yes.children[0].appearance.material.name = "FlatSurfaces";
		c.text_yes.children[0].appearance.material.name = "NavType";
		
		c.button_no.children[0].appearance.material.name = "GameHilite";
		c.text_no.children[0].appearance.material.name = "Material #133";
	}
}

DEF theMessageJoystick Joystick
{
	function OnADown()
	{
		if (nCurMessageButton != -1)
		{
			PlaySoundA();
			if (nCurMessageButton == 0)
				OnQuestionYes();
			else
				OnQuestionNo();
		}
	}
	
	function OnBDown()
	{
		if (nMessageButtonCount == 1)
		{
			// Just an OK button; B is the same as A
			OnADown();
			return;
		}
		
		if (nCurMessageButton != -1)
		{
			PlaySoundB();
			nCurMessageButton = 1;
			UpdateMessageButtonHighlight();
			OnQuestionNo();
		}
	}
	
	function OnMoveLeft()
	{
		if (nMessageButtonCount < 2)
			return;
		
		if (nCurMessageButton == 1)
		{
			PlaySoundMenuChange();
			nCurMessageButton = 0;
			UpdateMessageButtonHighlight();
		}
	}
	
	function OnMoveRight()
	{
		if (nMessageButtonCount < 2)
			return;
		
		if (nCurMessageButton == 0)
		{
			PlaySoundMenuChange();
			nCurMessageButton = 1;
			UpdateMessageButtonHighlight();
		}
	}
}

function AskQuestion(strQuestion, strYesFunction, strNoFunction, nDefaultButton)
{
	// Defer disc insertion/removal notification
	theDiscDrive.locked = true;
	BlockMemoryUnitInsert();
	
	var c = theMessageInline.children[0];
	
	c.MessagePanel.SetRotation(0, 0, 1, 0);
	c.MessagePanel.SetAlpha(1);
	
	strMessageText = strQuestion;
	strMessageYesFunction = strYesFunction;
	strMessageNoFunction = strNoFunction;
	
	c.button_yes.visible = true;
	c.button_no.visible = true;
	c.button_center.visible = false;
	c.slider_slot.visible = false;
	c.slider.visible = false;
	
	c.MessageText.text = strQuestion;
	
	nCurMessageButton = nDefaultButton;
	nMessageButtonCount = 2;
	UpdateMessageButtonHighlight();
	
	if (g_bPanelDisplayed == false)
	{
		theMessageJoystick.isBound = true;
	}
	
	theMessageLayer.transparency = 0.25;
	
	g_bPanelDisplayed = true;
}

function TellUser(strMessage, strDoneFunction)
{
	// Defer disc insertion/removal notification
	theDiscDrive.locked = true;
	BlockMemoryUnitInsert();
	
	var c = theMessageInline.children[0];
	
	c.MessagePanel.SetRotation(0, 0, 1, 0);
	c.MessagePanel.SetAlpha(1);
	
	strMessageText = strMessage;
	strMessageYesFunction = strDoneFunction;
	strMessageNoFunction = strDoneFunction;
	
	c.button_yes.visible = false;
	c.button_no.visible = false;
	c.button_center.visible = true;
	c.slider_slot.visible = false;
	c.slider.visible = false;
	
	c.MessageText.text = strMessage;
	
	nCurMessageButton = 0;
	nMessageButtonCount = 1;
	UpdateMessageButtonHighlight();
	
	if (g_bPanelDisplayed == false)
	{
		theMessageJoystick.isBound = true;
	}
	
	theMessageLayer.transparency = 0.25;
	
	g_bPanelDisplayed = true;
}

// This function will display a message panel without OK button
// and execute a function when complete
function BlockUserWithFunction(strMessage, strFunction)
{
	//
	// NOTE: We don't defer disc insertion/removal notification here.
	// For example, if user is trying to play DVD without dongle. We
	// will display message panel without okay button and wait for
	// user to remove the disc
	//
	
	BlockMemoryUnitInsert();
	
	var c = theMessageInline.children[0];
	
	c.MessagePanel.SetRotation(0, 0, 1, 0);
	c.MessagePanel.SetAlpha(1);
	
	strMessageText = strMessage;
	strMessageYesFunction = strFunction;
	strMessageNoFunction = "";
	
	c.button_yes.visible = false;
	c.button_no.visible = false;
	c.button_center.visible = false;
	c.slider_slot.visible = false;
	c.slider.visible = false;
	
	c.MessageText.text = strMessage;
	
	nCurMessageButton = -1;
	nMessageButtonCount = 0;
	UpdateMessageButtonHighlight();
	
	if (g_bPanelDisplayed == false)
	{
		theMessageJoystick.isBound = true;
	}
	
	theMessageLayer.transparency = 0.25;
	
	g_bPanelDisplayed = true;
}

// This function will display message panel without OK button
function BlockUser(strMessage)
{
	BlockUserWithFunction(strMessage, "");
}

function ShowProgress(strMessage)
{
	// Defer disc insertion/removal notification
	theDiscDrive.locked = true;
	BlockMemoryUnitInsert();
	
	var c = theMessageInline.children[0];
	
	c.MessagePanel.SetRotation(0, 0, 1, 0);
	c.MessagePanel.SetAlpha(1);
	
	c.button_yes.visible = false;
	c.button_no.visible = false;
	c.button_center.visible = false;
	c.slider_slot.visible = true;
	c.slider.visible = true;
	c.MessageText.text = strMessage;
	
	SetProgress(0);
	nCurMessageButton = -1;
	nMessageButtonCount = 0;
	
	theMessageJoystick.isBound = true;
	theMessageLayer.transparency = 0.25;
	
	// REVIEW: the progress "noise" is now disabled
	// theProgressSound.Play();
	
	g_bPanelDisplayed = true;
}

function UpdateProgressText(strMessage)
{
	var c = theMessageInline.children[0];
	c.MessageText.text = strMessage;
}

function SetProgress(nProgress)
{
	var nTempProgress = (nProgress * 1.665) - 0.165;
	var c = theMessageInline.children[0];
	c.slider.children[0].appearance.material.param = nTempProgress;
}

function CloseMessage()
{
	if (g_bPanelDisplayed == false)
	{
		return;
	}
	
	var c = theMessageInline.children[0];
	
	c.MessagePanel.SetRotation(0, 0, 1, 1.5);
	c.MessagePanel.SetAlpha(0.0);
	
	theMessageJoystick.isBound = false;
	theMessageLayer.transparency = 1;
	
	strMessageText = "";
	strMessageYesFunction = "";
	strMessageNoFunction = "";
	
	if (theProgressSound.transportMode != 0)
		theProgressSound.Stop();
	theCompleteSound.Play();
	
	if( true == g_bResetDiscDeferredNotification )
	{
		g_bResetDiscDeferredNotification = false;
		
		
		//
		// This code was added for the disclaimer dialog
		// If we are dealing with either "Audio" media or "unknown" media we do not want any deferred
		// messages popping up because we are going to handle media after the dialog
		// We do, however, want 'Title' and 'Video' media to be processed as normal
		//
		
		if( ( ( "Audio" == theDiscDrive.discType ) + ( "unknown" == theDiscDrive.discType ) ) == true )
		{
			theDiscDrive.bDeferNotification = false;
		}
	}
	
	
	//
	// When we present the disclaimer dialog during the out-of-box flow,
	// we do NOT want to unlock the drive after the dialog is cleared.  We
	// want to finish the OOB flow, and then unlock the drive to deal
	// with media
	//
	
	if( g_bLeaveDriveLocked )
	{
		g_bLeaveDriveLocked = false;
	}
	else
	{
		theDiscDrive.locked = false;
	}
	
	
	//
	// When we present the disclaimer dialog during the out-of-box flow,
	// we do NOT want to unlock memory unit insertion after the dialog is cleared.  We
	// want to finish the OOB flow, and then unblock the memory unit insertions
	//
	
	if( g_bLeaveMemoryUnitsBlocked )
	{
		g_bLeaveMemoryUnitsBlocked = false;
	}
	else
	{
		UnblockMemoryUnitInsert();
	}
	
	g_bPanelDisplayed = false;
}

function OnQuestionYes()
{
	var strYesFunction = strMessageYesFunction;
	
	CloseMessage();
	
	if (strYesFunction != "")
		eval(strYesFunction);
}

function OnQuestionNo()
{
	var strNoFunction = strMessageNoFunction;
	
	CloseMessage();
	
	if (strNoFunction != "")
		eval(strNoFunction);
}

DEF theXboxLogo4x3Background Background
{
	skyColor 0 0 0
	backdrop ImageTexture { url "xboxlogo.bmp" }
}

DEF theXboxLogo16x9Background Background
{
	skyColor 0 0 0
	backdrop ImageTexture { url "xboxlogow.bmp" }
}

DEF theXOnlineLevel Level
{
	path Viewpoint
	{
		fieldOfView 1.438000
		orientation -0.999500 -0.031970 0.000318 -0.019900
		position 41.650002 28.885000 -300.300003
		jump false
	}
	
	function OnArrival()
	{
		DisableAmbientAudio();
		BlockMemoryUnitEnumeration();
		ClosePopup();
		ShowWaitCursor();
		
		// Set flag so that "behavior" polling will reboot the system
		g_bAboutToRebootToOnline = true;
	}
	
	behavior
	{
		sleep 1.1;
		
		if (g_bAboutToRebootToOnline)
		{
			// Don't reboot until the Live Now zoom in transition sound has finished
			if (theLiveNowMenuIn.isActive)
			{
				alert("LiveNowMenuIn sound still active...");
			}
			else
			{
				if (strEntryPointInternalDestination == "DASH_UPDATE")
					theLiveAccounts.LaunchDashUpdate();
				else if (strEntryPointInternalDestination != "")
					theLiveAccounts.LaunchEntryPoint(g_nActiveControllerPort, g_bClearPasscode, strEntryPointInternalDestination);
				else
					theConfig.GoToXOnlineDash();    // Launch the Online Dash
			}
		}
	}
	
	function OnActivate()
	{
		DisableAmbientAudio();
		BlockMemoryUnitEnumeration();
		ClosePopup();
		EnableInput(false);
	}
}

DEF theLauncherLevel Level
{
	function OnArrival()
	{
		DisableAmbientAudio();
		BlockMemoryUnitEnumeration();
		ClosePopup();
		
		// Set flag to so that "behavior" polling will reboot the system
		g_bAboutToReboot = true;
		
		// Bind the proper background image
		if( theConfig.GetVideoMode() == 2 )
			theXboxLogo16x9Background.isBound = true;
		else
			theXboxLogo4x3Background.isBound = true;
	}
	
	behavior
	{
		sleep 1.1;
		
		if (g_bAboutToReboot)
		{
			if (g_nRec == 1)
				theConfig.BackToLauncher2();
			else if (g_nRec == 3 )
				theConfig.GoToXOnlineDash();    // Launch the Online Dash
			else if (bBackToLauncher)
				theConfig.BackToLauncher();     // This will boot to the dash or to title with context
			else
				theDiscDrive.LaunchDisc();      // This will boot to title/dashboard or DVD player
		}
	}
	
	function OnActivate()
	{
		DisableAmbientAudio();
		BlockMemoryUnitEnumeration();
		ClosePopup();
		EnableInput(false);
		
		// Bind the proper background image
		if( theConfig.GetVideoMode() == 2 )
			theXboxLogo16x9Background.isBound = true;
		else
			theXboxLogo4x3Background.isBound = true;
	}
}

////////////////////////////////////////////////////////////////////////////

function BlockMemoryUnitInsert()
{
	theMemoryMonitor.blockInsertion = true;
}

function UnblockMemoryUnitInsert()
{
	theMemoryMonitor.blockInsertion = false;
}

function BlockMemoryUnitEnumeration()
{
	theMemoryMonitor.enumerationOn = false;
}

function UnblockMemoryUnitEnumeration()
{
	theMemoryMonitor.enumerationOn = false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// Added Functions for HDD Menu
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ReturnInteger(x) // data read from xbx is read as a string - this will convert that string value to an integer
{
	var a = x;
	var b = Math.abs(a);
	if(a.charCodeAt(0) == 45)
	{
		var c = b * 2;
		b = b - c;
	}
	return b;
}

function FillMenuList(x) // search c,e,f,g for a relative path's contents to use to fill a menu
{
	var FolderName = x;
	var c = new Folder; //def a new folder
	c.path = "Y:\\" + FolderName; //def it's path
	var cSize = c.subFolders.length(); //find the number of subfolders in it
	var cTitles = new Array(cSize); //setup a loop to put it's contents into an array
	if(cSize > 0)
	{
		for(var cLoop = 0; cLoop < cSize; cLoop = cLoop + 1)
		{
			cTitles[cLoop] = c.subFolders[cLoop].name;
		}
	}
	var e = new Folder; //repeat above for all drives
	e.path = "C:\\" + FolderName;
	var eSize = e.subFolders.length();
	var eTitles = new Array(eSize);
	if(eSize > 0)
	{
		for(var eLoop = 0; eLoop < eSize; eLoop = eLoop + 1)
		{
			eTitles[eLoop] = e.subFolders[eLoop].name;
		}
	}
	var Sc = new Folder;
	Sc.path = "C:\\Shortcuts\\" + FolderName;
	var ScSize = Sc.subFolders.length();
	var ScTitles = new Array(ScSize);
	if(ScSize > 0)
	{
		for(var ScLoop = 0; ScLoop < ScSize; ScLoop = ScLoop + 1)
		{
			ScTitles[ScLoop] = Sc.subFolders[ScLoop].name;
		}
	}
	var mA = cTitles.concat(eTitles);//keep merging the arrays till you have one big one
	var nA = mA.concat(ScTitles);
	nA = nA.sort();//sort the one big array into alphabetical order
	return nA;//return the array
}

DEF theLaunchGameLevel Level
{
	function OnArrival()
	{
		g_bAboutToLaunchGame = true;
		// Bind the proper background image
		if( theConfig.GetVideoMode() == 2 )
			theXboxLogo16x9Background.isBound = true;
		else
			theXboxLogo4x3Background.isBound = true;        
	}
	behavior
	{
		sleep 1.1;
		
		if (g_bAboutToLaunchGame)
		{
			launch(launchXbe, launchPath);   
		}
	}    
	function OnActivate()
	{
		theScreenSaver.enabled = true;
	}
}

function QuickLaunch(x)
{
	LeftTrigger  = false;
	RightTrigger = false;
	
	var button = x;
	var a = GetSavedValue("QuickLaunch","QuickLaunch" + button);
	if (a == "") 
	{
		return;
	}
	var b = a.substr(0,1);
	var c = a.indexOf("\\");
	var d = a.lastIndexOf("\\");
	var e = a.substr(c , d - c);
	
	launchXbe = a.substr(d + 1);
	
	if(b == "C") { launchPath = "\\Device\\Harddisk0\\Partition2" + e; }
	else if(b == "E") { launchPath = "\\Device\\Harddisk0\\Partition1" + e; }
	else return;
	
	if (theConfig.NtFileExists(launchPath + "\\" + launchXbe)) 
	{
		theLaunchGameLevel.GoTo();
	}
}

function LaunchItem(x,y)
{
	var RelativePath = x;
	var FolderName = y;
	var checkc = theConfig.NtFileExists( "\\Device\\Harddisk0\\Partition2\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
	var checke = theConfig.NtFileExists( "\\Device\\Harddisk0\\Partition1\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
	var checkShortcut = theConfig.NtFileExists( "\\Device\\Harddisk0\\Partition1\\Shortcuts\\" + RelativePath + "\\" + FolderName + "\\default.xbe" );
	var checkevoxc = theConfig.NtFileExists( "\\Device\\Harddisk0\\Partition2\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
	var checkevoxe = theConfig.NtFileExists( "\\Device\\Harddisk0\\Partition1\\" + RelativePath + "\\" + FolderName + "\\evoxdash.xbe" );
	
	if(checkc == true)
	{
		launchPath = "\\Device\\Harddisk0\\Partition2\\" + RelativePath + "\\" + FolderName;
		launchXbe = "default.xbe";
		theLaunchGameLevel.GoTo();
	}
	else if(checke == true)
	{
		launchPath = "\\Device\\Harddisk0\\Partition1\\" + RelativePath + "\\" + FolderName;
		launchXbe = "default.xbe";
		theLaunchGameLevel.GoTo();
	}
	else if(checkShortcut == true)
	{
		launchPath = "\\Device\\Harddisk0\\Partition1\\Shortcuts\\" + RelativePath + "\\" + FolderName;
		launchXbe = "default.xbe";
		theLaunchGameLevel.GoTo();
	}
	else if(checkevoxc == true)
	{
		launchPath = "\\Device\\Harddisk0\\Partition2\\" + RelativePath + "\\" + FolderName;
		launchXbe  = "evoxdash.xbe";
		theLaunchGameLevel.GoTo();
	}
	else if(checkevoxe == true)
	{
		launchPath = "\\Device\\Harddisk0\\Partition1\\" + RelativePath + "\\" + FolderName;
		launchXbe  = "evoxdash.xbe";
		theLaunchGameLevel.GoTo();
	}
}

////////////////////////////////////////////////////////////////////////////

function EnableCurrentAlternateViewpoint()
{
	CurrentAltViewpoint.isBound = true;
}

function DisableCurrentAlternateViewpoint()
{
	CurrentViewpoint.isBound = true;
}

DEF theMainMenuAlternateViewpoint Viewpoint
{
	fieldOfView 1.755000
	orientation -0.177400 -1.983500 -0.036250 -0.045440
	position -15.180000 -112.299999 174.300003
	jump false
}

function GetSavedValue(x,y) 
{
	var a = x;
	var b = y;
	ConfigFile.section = a;
	var c = ConfigFile.GetValue(b);
	return c;
}

function SetSavedValue(x,y) 
{
	var a = x;
	var b = y;
	ConfigFile.section = a;
	var c = ConfigFile.SetValue(b);
	return c;
}

function GetConfigInfo()
{
	ConfigFile.section = "default";
	var TotalSections   = ConfigFile.GetValue("TotalSections");
	return TotalSections;
}

function GetSectionTitles(x)
{
	var a = x;
	ConfigFile.section = "section" + a;
	var SectionName = ConfigFile.GetValue("Title");
	return SectionName;
}

function GetSectionPaths(x)
{
	var a = x;
	ConfigFile.section = "section" + a;
	var SectionPath = ConfigFile.GetValue("Path");
	return SectionPath;
}

function GetOrb()
{
	ConfigFile.section = "default";
	var a = ConfigFile.GetValue("UseThcOrb");
	if(a == "Yes")
	{
		return true;
	}
	else
	{
		return false;
	}
}

function SetOrb(x)
{
	ConfigFile.section = "default";
	if(x)
	{
		ConfigFile.SetValue("UseThcOrb", "Yes");
	}
	else
	{
		ConfigFile.SetValue("UseThcOrb", "No");
	}
}
